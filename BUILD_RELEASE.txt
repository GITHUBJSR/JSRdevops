--- Maven build lifecycle
Each of these build lifecycles is defined by a different list of build phases, wherein a build phase represents a stage in the lifecycle.

-validate - validate the project is correct and all necessary informaion is available.
compile - compile the source code of the project
test - test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed
package - take the compiled code and package it in its distributable format, such as a JAR/WAR.
install - install the package into the local repository, for use as a dependency in other projects locally
--- Installing C:\MAVEN\JSRDEVOPSDEMO\pom.xml to C:\Users\hp\.m2\repository\JSR\JSRDEVOPSDEMO\1.0
deploy - done in the build environment, copies the final package to the remote repository for sharing with other developers and projects.
clean: to clean the project and remove all files generated by the previous build
site: to create the project's site documentation

Repository follows simple directory structure 
-- [groupid]/[artifactid]/[version]/[artifactid-version.jar]

-- when you run maven command/goal whatever the sources that it needs it will generate a list and based on list of resources it goes to local repo it checks in it.
if its not there tries to download from remote repository on the internet put into local repo from there it uses it.

-- the output of JAR file will be giving to the testing or release

-- Describe a maven project or POM file
name and version
artifact type
source code locations
dependencies
plugins 
profiles (alternate build configurations)

****** GIT COMMANDS
UPDATE

Update your local repo from the remote (but don't merge):
--- git fetch 

After downloading the updates, let's see the differences:
--- git diff master origin/master 

If you're happy with those updates, then merge:
--- git pull

git init
git remote add origin git://github.com/cmcculloh/repo.git
git fetch --all
git pull origin master
git clone git://github.com/cmcculloh/repo.git

git checkout master                                                  
git fetch                                        
git diff origin/master
git rebase origin master

---- Clone: Get a working copy of the remote repository.means you are making a copy of the repository in your system.
---- Pull: I am working on this, please get me the new changes that may be updated by others.means you are fetching the last modified repository.
---- git clone is downloading and git pull is refreshing.
---- git diff master..mastersubbranch -  shows the differences between master and branch or modified files between master and branch.
---- git merge <branchname>

***** I have two branches namely master and development in a GitHub Repository. I am doing all my development in development branch as shown.

git branch development
git add *
git commit -m "My initial commit message"
git push -u origin development

****** Now I want to merge all the changes on the development branch into the master. My current approach is:
git checkout master 
git merge mastersubbranch
git push -u origin master

--- work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

---- $ git branch --merged -- to see the branch is merged with master branch.
* master
  mastersubbranch

***** scenario
You begin to create a new branch in this way:

Clone repository in your local dir (or create a new repository):
$ cd /var/www
$ git clone git@bitbucket.org:user_name/repository_name.git
Create a new branch. It will contain the latest files of your master branch repository
$ git branch new_branch
Change your current git branch to the new_branch
$ git checkout new_branch
Do coding, commits, as usual…
$ git add .
$ git commit -m “Initial commit”
$ git push # pushes commits only to “new_branch”
When job is finished on this branch, merge with “master” branch:
$ git merge master
$ git checkout master # goes to master branch
$ git merge development # merges files in localhost. Master shouldn’t have any  commits ahead, otherwise there will be a need for pull and merging code by hands!
$ git push # pushes all “new_branch” commits to both branches - “master” and “new_branch”



